{"version":3,"sources":["components/TopBar/TopBar.jsx","App.js","serviceWorker.js","index.js"],"names":["TopBar","className","id","Component","marked","require","App","props","state","markdown","handleChange","bind","e","this","setState","target","value","FormGroup","controlId","FormControl","as","placeholder","onChange","style","height","borderRadius","border","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qVAGqBA,G,6KAEjB,OACE,yBAAKC,UAAU,WACb,iDAGE,0BAAMC,GAAG,eACP,uBAAGD,UAAU,iB,GARWE,cCG9BC,EAASC,EAAQ,IA8CRC,E,kDA3Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,MAAQ,CACNC,SAAU,IAVV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,yDAKNC,GACXC,KAAKC,SAAS,CACZL,SAAUG,EAAEG,OAAOC,U,+BAQb,IACAP,EAAaI,KAAKL,MAAlBC,SACR,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,WACb,kBAACgB,EAAA,EAAD,CAAWC,UAAU,wBACnB,kBAACC,EAAA,EAAD,CACEC,GAAG,WACHC,YAAY,iBACZL,MAAOP,EACPa,SAAUT,KAAKH,aACfa,MAAO,CAACC,OAAQ,OAAQC,aAAc,OAAQC,OAAQ,yBAK5D,yBAAKzB,UAAU,WACb,yBAAKA,UAAU,SAAS0B,wBAAyB,CAAEC,OAAQxB,EAAOK,a,GAnC5DN,aCIE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.263aae57.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './TopBar.scss'\n\nexport default class TopBar extends Component {\n  render() {\n    return (\n      <div className='top-bar'>\n        <p>Markdown Previewer</p>\n\n        {/* <!-- Dark Mode Switch --> */}\n          <span id=\"toggle-icon\">\n            <i className=\"my-sun\"></i>\n          </span>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport TopBar from './components/TopBar/TopBar'\n\nconst marked = require('marked')\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(e) {\n    this.setState({\n      markdown: e.target.value\n    })\n  }\n\n  state = {\n    markdown: ''\n  }\n\n  render() {\n    const { markdown } = this.state\n    return (\n      <div className=\"App\">\n        <TopBar></TopBar>\n        <div className=\"io-container\">\n          <div className=\"section\">\n            <FormGroup controlId=\"formControlsTextarea\">\n              <FormControl\n                as=\"textarea\"\n                placeholder=\"Enter Markdown\"\n                value={markdown}\n                onChange={this.handleChange}\n                style={{height: \"90vh\", borderRadius: \"10px\", border: \"1px solid #1b9999\"}}\n              >\n              </FormControl>\n            </FormGroup>\n          </div>\n          <div className=\"section\">\n            <div className=\"output\" dangerouslySetInnerHTML={{ __html: marked(markdown) }}>\n            </div>\n          </div>\n        </div>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}