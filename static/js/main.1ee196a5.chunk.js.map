{"version":3,"sources":["contexts/ThemeContext.js","components/TopBar/TopBar.jsx","components/IoContainer/IoContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","state","isLightTheme","light","primaryColor","primaryVariant","secondaryColor","onPrimary","onBackground","navBackground","outputBG","dark","toggleTheme","console","log","setState","Provider","value","this","props","children","Component","TopBar","context","theme","document","body","style","backgroundColor","className","color","id","onClick","contextType","marked","require","IoContainer","markdown","handleChange","bind","e","target","FormGroup","controlId","FormControl","as","placeholder","onChange","height","borderRadius","border","dangerouslySetInnerHTML","__html","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wUAEaA,EAAeC,0BAuCbC,E,4MApCbC,MAAQ,CACNC,cAAc,EACdC,MAAO,CACLC,aAAc,UACdC,eAAgB,UAChBC,eAAgB,UAChBC,UAAW,qBACXC,aAAc,kBACdC,cAAe,2BACfC,SAAU,4BAEZC,KAAM,CACJP,aAAc,UACdC,eAAgB,UAChBC,eAAgB,UAChBC,UAAW,UACXC,aAAc,2BACdC,cAAe,qBACfC,SAAU,qB,EAIdE,YAAc,WACZC,QAAQC,IAAI,iBACZ,EAAKC,SAAS,CAAEb,cAAe,EAAKD,MAAMC,gB,uDAI1C,OACE,kBAACJ,EAAakB,SAAd,CAAuBC,MAAK,2BAAOC,KAAKjB,OAAZ,IAAmBW,YAAaM,KAAKN,eAC9DM,KAAKC,MAAMC,c,GA/BeC,aCAdC,E,uKAET,IAAD,EAC4CJ,KAAKK,QAAhDrB,EADD,EACCA,aAAcC,EADf,EACeA,MAAOQ,EADtB,EACsBA,KAAMC,EAD5B,EAC4BA,YAC7BY,EAAQtB,EAAeC,EAAQQ,EAIrC,OAFAc,SAASC,KAAKC,MAAMC,gBAAkBJ,EAAMjB,UAG1C,yBAAKsB,UAAU,UAAUF,MAAO,CAACC,gBAAiBJ,EAAMf,gBACtD,uBAAGkB,MAAO,CAACG,MAAON,EAAMpB,eAAxB,sBAGE,0BAAM2B,GAAG,cAAcC,QAASpB,GAE5BV,EACA,uBAAG2B,UAAU,WACb,uBAAGA,UAAU,kB,GAjBSR,aAAfC,EACZW,YAAcnC,E,4BCDjBoC,EAASC,EAAQ,IAGFC,E,kDACnB,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAYRlB,MAAQ,CACNoC,SAAU,IAZV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,yDAONC,GACXtB,KAAKH,SAAS,CACZsB,SAAUG,EAAEC,OAAOxB,U,+BAQb,IAAD,EAC+BC,KAAKK,QAAnCrB,EADD,EACCA,aAAcC,EADf,EACeA,MAAOQ,EADtB,EACsBA,KACvBa,EAAQtB,EAAeC,EAAQQ,EAC7B0B,EAAanB,KAAKjB,MAAlBoC,SACR,OACE,yBAAKR,UAAU,gBACX,yBAAKA,UAAU,WACb,kBAACa,EAAA,EAAD,CAAWC,UAAU,wBACnB,kBAACC,EAAA,EAAD,CACEC,GAAG,WACHC,YAAY,iBACZ7B,MAAOoB,EACPU,SAAU7B,KAAKoB,aACfX,MAAO,CAAEqB,OAAQ,OAAQC,aAAc,OAAQC,OAAO,aAAD,OAAe1B,EAAMpB,cAAgBwB,gBAAiBJ,EAAMjB,eAKvH,yBAAKsB,UAAU,WACb,yBAAKF,MAAO,CAACC,gBAAiBJ,EAAMd,SAAUwC,OAAO,aAAD,OAAe1B,EAAMpB,eAAiByB,UAAU,SAASsB,wBAAyB,CAAEC,OAAQlB,EAAOG,Y,GArC1HhB,aAApBe,EAMZH,YAAcnC,E,ICQRuD,E,uKAXX,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GARQR,aCMEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASqC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.1ee196a5.chunk.js","sourcesContent":["import React, { createContext, Component } from 'react'\n\nexport const ThemeContext = createContext()\n\nclass ThemeContextProvider extends Component {\n  state = {\n    isLightTheme: true,\n    light: {\n      primaryColor: '#ff5c5c',\n      primaryVariant: '#ff2d2d',\n      secondaryColor: '#1b9999',\n      onPrimary: 'rgb(250, 250, 250)',\n      onBackground: 'rgb(66, 66, 66)',\n      navBackground: 'rgba(255, 255, 255, 0.5)',\n      outputBG: 'rgba(241, 241, 241, 0.6)'\n    },\n    dark: {\n      primaryColor: '#9641ff',\n      primaryVariant: '#6c63ff',\n      secondaryColor: '#03dac5',\n      onPrimary: '#121212',\n      onBackground: 'rgba(255, 255, 255, 0.9)',\n      navBackground: 'rgba(0, 0, 0, 0.5)',\n      outputBG: 'rgba(9,9,9, 0.9)'\n    }\n  }\n\n  toggleTheme = () => {\n    console.log('theme toggled')\n    this.setState({ isLightTheme: !this.state.isLightTheme })\n  }\n\n  render() {\n    return (\n      <ThemeContext.Provider value={{ ...this.state, toggleTheme: this.toggleTheme }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    )\n  }\n}\n\nexport default ThemeContextProvider;","import React, { Component } from 'react'\nimport './TopBar.scss'\nimport { ThemeContext } from '../../contexts/ThemeContext'\n\nexport default class TopBar extends Component {\n  static contextType = ThemeContext;\n  render() {\n    const { isLightTheme, light, dark, toggleTheme } = this.context;\n    const theme = isLightTheme ? light : dark;\n\n    document.body.style.backgroundColor = theme.onPrimary\n\n    return (\n      <div className='top-bar' style={{backgroundColor: theme.navBackground}}>\n        <p style={{color: theme.primaryColor}}>Markdown Previewer</p>\n\n        {/* <!-- Dark Mode Switch --> */}\n          <span id=\"toggle-icon\" onClick={toggleTheme}>\n            {\n              isLightTheme ? \n              <i className=\"my-sun\"></i> :\n              <i className=\"my-moon\"></i>\n            }\n          </span>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { ThemeContext } from '../../contexts/ThemeContext';\nconst marked = require('marked')\n\n\nexport default class IoContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  static contextType = ThemeContext;\n\n  handleChange(e) {\n    this.setState({\n      markdown: e.target.value\n    })\n  }\n\n  state = {\n    markdown: ''\n  }\n\n  render() {\n    const { isLightTheme, light, dark } = this.context;\n    const theme = isLightTheme ? light : dark\n    const { markdown } = this.state\n    return (\n      <div className=\"io-container\">\n          <div className=\"section\">\n            <FormGroup controlId=\"formControlsTextarea\">\n              <FormControl\n                as=\"textarea\"\n                placeholder=\"Enter Markdown\"\n                value={markdown}\n                onChange={this.handleChange}\n                style={{ height: \"90vh\", borderRadius: \"10px\", border: `1px solid ${theme.primaryColor}`, backgroundColor: theme.onPrimary}}\n              >\n              </FormControl>\n            </FormGroup>\n          </div>\n          <div className=\"section\">\n            <div style={{backgroundColor: theme.outputBG, border: `1px solid ${theme.primaryColor}`}} className=\"output\" dangerouslySetInnerHTML={{ __html: marked(markdown) }}>\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TopBar from './components/TopBar/TopBar'\nimport IoContainer from './components/IoContainer/IoContainer'\nimport ThemeContextProvider from './contexts/ThemeContext';\n\nclass App extends Component {\n\n  render() {\n  \n    return (\n      <div className=\"App\">\n        <ThemeContextProvider>\n          <TopBar></TopBar>\n          <IoContainer></IoContainer>\n        </ThemeContextProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}